 🔁 Transaction API – Library Info Sys#tem

This is the `Transaction API` of the **Library Info System**, built using **Spring Boot** and **PostgreSQL**. It handles issuing and returning books between users and the library.

---

## 📁 Package Structure

```
com.library.library.info.system
├── controller
│   └── TransactionController.java
├── dto
│   └── TransactionDTO.java
├── model
│   └── Transaction.java
├── repository
│   └── TransactionRepository.java
├── service
│   └── TransactionService.java
```

---

## 📦 1. Entity Class

### `Transaction.java`
```java
package com.library.library.info.system.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
public class Transaction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private User user;

    @ManyToOne
    private Book book;

    private LocalDate issueDate;
    private LocalDate returnDate;

    // Getters and Setters
}
```

---

## 🧾 2. DTO Class

### `TransactionDTO.java`
```java
package com.library.library.info.system.dto;

import java.time.LocalDate;

public class TransactionDTO {

    private Long userId;
    private Long bookId;
    private LocalDate issueDate;
    private LocalDate returnDate;

    // Getters and Setters
}
```

---

## 💾 3. Repository Interface

### `TransactionRepository.java`
```java
package com.library.library.info.system.repository;

import com.library.library.info.system.model.Transaction;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TransactionRepository extends JpaRepository<Transaction, Long> {
}
```

---

## 🛠 4. Service Layer

### `TransactionService.java`
```java
package com.library.library.info.system.service;

import com.library.library.info.system.dto.TransactionDTO;
import com.library.library.info.system.model.Book;
import com.library.library.info.system.model.Transaction;
import com.library.library.info.system.model.User;
import com.library.library.info.system.repository.BookRepository;
import com.library.library.info.system.repository.TransactionRepository;
import com.library.library.info.system.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TransactionService {

    @Autowired
    private TransactionRepository transactionRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BookRepository bookRepository;

    public Transaction createTransaction(TransactionDTO dto) {
        User user = userRepository.findById(dto.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        Book book = bookRepository.findById(dto.getBookId())
                .orElseThrow(() -> new RuntimeException("Book not found"));

        Transaction transaction = new Transaction();
        transaction.setUser(user);
        transaction.setBook(book);
        transaction.setIssueDate(dto.getIssueDate());
        transaction.setReturnDate(dto.getReturnDate());

        return transactionRepository.save(transaction);
    }

    public List<Transaction> getAllTransactions() {
        return transactionRepository.findAll();
    }

    public void deleteTransaction(Long id) {
        transactionRepository.deleteById(id);
    }
}
```

---

## 🌐 5. Controller

### `TransactionController.java`
```java
package com.library.library.info.system.controller;

import com.library.library.info.system.dto.TransactionDTO;
import com.library.library.info.system.model.Transaction;
import com.library.library.info.system.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
public class TransactionController {

    @Autowired
    private TransactionService transactionService;

    @PostMapping
    public Transaction createTransaction(@RequestBody TransactionDTO dto) {
        return transactionService.createTransaction(dto);
    }

    @GetMapping
    public List<Transaction> getAllTransactions() {
        return transactionService.getAllTransactions();
    }

    @DeleteMapping("/{id}")
    public void deleteTransaction(@PathVariable Long id) {
        transactionService.deleteTransaction(id);
    }
}
```

---

## 🧪 API Testing with Postman

### ✅ Create Transaction (POST)
**URL:** `/api/transactions`  
**Body:**
```json
{
  "userId": 1,
  "bookId": 2,
  "issueDate": "2025-07-24",
  "returnDate": "2025-08-10"
}
```

---

### 📋 Get All Transactions (GET)
**URL:** `/api/transactions`

---

### ❌ Delete Transaction (DELETE)
**URL:** `/api/transactions/{id}`  
Example: `/api/transactions/1`

---

## 🛠 Technologies Used

- **Java 17+**
- **Spring Boot**
- **PostgreSQL**
- **Spring Data JPA**
- **Lombok (optional)**
- **Postman** for testing
- **Maven** for dependency management
